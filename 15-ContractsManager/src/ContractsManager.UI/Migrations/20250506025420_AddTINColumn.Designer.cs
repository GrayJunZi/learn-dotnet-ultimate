// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUDExample.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506025420_AddTINColumn")]
    partial class AddTINColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fec019fc-4008-4c62-9485-96a7d38299ca"),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = new Guid("209038d2-b47b-4528-b34b-e1e5ba80ad35"),
                            Name = "Shanghai"
                        },
                        new
                        {
                            Id = new Guid("d99dea01-7cff-49c0-a878-12f799f6b2bc"),
                            Name = "Guangzhou"
                        },
                        new
                        {
                            Id = new Guid("1bcfea14-2ec5-4f8f-a870-22f07bb3d893"),
                            Name = "Shenzhen"
                        });
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("ReceiveNewsletter")
                        .HasColumnType("bit");

                    b.Property<string>("TIN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons", (string)null);

                    b.HasData(
                        new
                        {
                            PersonId = new Guid("32859a69-4bdd-489d-9912-f2dab6b64270"),
                            Address = "123 Main Street",
                            DateOfBirth = new DateTime(2005, 5, 6, 10, 54, 19, 522, DateTimeKind.Local).AddTicks(5242),
                            Email = "john@doe.com",
                            PersonName = "John Doe",
                            ReceiveNewsletter = false
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
